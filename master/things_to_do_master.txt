Que hay que hacer en el master :

Chequear los parametros del master -> YA CASI LISTO

Inicialización de recursos compartidos:

    Crear memorias compartidas:

    Inicializar los semáforos:

Creación de canales de comunicación:

    Crear pipes anónimos para que cada jugador envíe sus solicitudes de movimiento.

Creación de procesos jugadores y vista:

    Utilizar fork() para crear procesos hijos para cada jugador y para la vista.

Distribución de los jugadores en el tablero:

    Definir un algoritmo determinístico para asignar posiciones iniciales a cada jugador de manera equitativa, asegurando un margen de movimiento similar para todos.

    Por ejemplo, podrías utilizar la división del tablero en secciones o posiciones predefinidas basadas en la cantidad de jugadores y las dimensiones del tablero.

Recepción y validación de solicitudes de movimiento:

    Leer continuamente las solicitudes de movimiento enviadas por los jugadores a través de los pipes.

    Validar cada solicitud:

        Que el código del movimiento esté en el rango [0-8].

        Que el movimiento sea válido (dentro de los límites del tablero y hacia una celda libre).

    Registrar las solicitudes inválidas.

Actualización del estado del juego:

    En caso de que la solicitud sea válida:

        Actualizar la celda destino, marcándola como capturada (almacenando el identificador del jugador).

        Sumar la recompensa (valor de la celda) al puntaje del jugador correspondiente.

        Actualizar la cantidad de movimientos válidos del jugador.

    En caso de movimiento inválido, incrementar el contador de movimientos inválidos.

Selección del siguiente jugador (Round-robin):

    Implementar una política de atención que recorra de manera cíclica (round-robin) a los jugadores que tengan solicitudes pendientes.

    Esto asegura que, en cada iteración, se atiende el siguiente jugador en cola, sin que alguno se quede sin ser procesado.

Sincronización con la vista:

    Tras cada cambio en el estado del juego:

        Señalizar a la vista utilizando el semáforo A para indicarle que hay cambios que imprimir.

        Esperar a que la vista termine de imprimir, lo cual se puede lograr esperando (con sem_wait) a que el semáforo B sea liberado por la vista.

        Luego, esperar un tiempo adicional (delay) configurado mediante el parámetro -d antes de continuar.

Manejo del timeout:

    Registrar el tiempo transcurrido entre solicitudes de movimientos válidas.

    Si se supera el timeout (configurado mediante -t), finalizar el juego.

    Ten en cuenta que este tiempo incluye la espera a que la vista imprima el estado.

Finalización del juego y recolección de resultados:

    Una vez detectado el fin del juego (por timeout o cuando ningún jugador puede moverse):

        Registrar el fin del juego en la variable correspondiente del estado compartido.

        Esperar a que todos los procesos (jugadores y vista) finalicen su ejecución.

        Recopilar e imprimir el valor de retorno de cada proceso y, en el caso de los jugadores, su puntaje final.

Limpieza de recursos:

    Liberar los recursos del sistema:

        Cerrar y desvincular las memorias compartidas.

        Destruir los semáforos utilizados.

        Cerrar los descriptores de los pipes y realizar un wait() para cada proceso hijo, evitando zombies.